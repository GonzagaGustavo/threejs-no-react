{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree } from '@react-three/fiber';\nimport * as React from 'react';\nimport { PointerLockControls as PointerLockControls$1 } from 'three-stdlib';\nconst PointerLockControls = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    selector,\n    onChange,\n    onLock,\n    onUnlock,\n    enabled = true,\n    ...props\n  } = _ref;\n  const {\n    camera,\n    ...rest\n  } = props;\n  const gl = useThree(_ref2 => {\n    let {\n      gl\n    } = _ref2;\n    return gl;\n  });\n  const defaultCamera = useThree(state => state.camera);\n  const invalidate = useThree(state => state.invalidate);\n  const raycaster = useThree(state => state.raycaster);\n  const events = useThree(state => state.events);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = gl.domElement || (typeof events.connected !== 'boolean' ? events.connected : gl.domElement);\n  const [controls] = React.useState(() => new PointerLockControls$1(explCamera));\n  React.useEffect(() => {\n    if (enabled) {\n      const callback = e => {\n        invalidate();\n        if (onChange) onChange(e);\n      };\n\n      controls.connect(explDomElement);\n      controls.addEventListener('change', callback);\n      if (onLock) controls.addEventListener('lock', onLock);\n      if (onUnlock) controls.addEventListener('unlock', onUnlock); // Force events to be centered while PLC is active\n\n      const oldComputeOffsets = raycaster.computeOffsets;\n\n      raycaster.computeOffsets = e => ({\n        offsetX: e.target.width / 2,\n        offsetY: e.target.height / 2\n      }); // Enforce previous interaction\n\n\n      const handler = () => controls.lock();\n\n      const elements = selector ? Array.from(document.querySelectorAll(selector)) : [document];\n      elements.forEach(element => element && element.addEventListener('click', handler));\n      return () => {\n        controls.disconnect();\n        controls.removeEventListener('change', callback);\n        if (onLock) controls.addEventListener('lock', onLock);\n        if (onUnlock) controls.addEventListener('unlock', onUnlock);\n        elements.forEach(element => element ? element.removeEventListener('click', handler) : undefined);\n        raycaster.computeOffsets = oldComputeOffsets;\n      };\n    }\n  }, [enabled, onChange, onLock, onUnlock, controls, invalidate, selector]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls\n  }, rest));\n});\nexport { PointerLockControls };","map":{"version":3,"sources":["C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@react-three/drei/core/PointerLockControls.js"],"names":["_extends","useThree","React","PointerLockControls","PointerLockControls$1","forwardRef","ref","selector","onChange","onLock","onUnlock","enabled","props","camera","rest","gl","defaultCamera","state","invalidate","raycaster","events","explCamera","explDomElement","domElement","connected","controls","useState","useEffect","callback","e","connect","addEventListener","oldComputeOffsets","computeOffsets","offsetX","target","width","offsetY","height","handler","lock","elements","Array","from","document","querySelectorAll","forEach","element","disconnect","removeEventListener","undefined","createElement","object"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree } from '@react-three/fiber';\nimport * as React from 'react';\nimport { PointerLockControls as PointerLockControls$1 } from 'three-stdlib';\n\nconst PointerLockControls = /*#__PURE__*/React.forwardRef(({\n  selector,\n  onChange,\n  onLock,\n  onUnlock,\n  enabled = true,\n  ...props\n}, ref) => {\n  const {\n    camera,\n    ...rest\n  } = props;\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const defaultCamera = useThree(state => state.camera);\n  const invalidate = useThree(state => state.invalidate);\n  const raycaster = useThree(state => state.raycaster);\n  const events = useThree(state => state.events);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = gl.domElement || (typeof events.connected !== 'boolean' ? events.connected : gl.domElement);\n  const [controls] = React.useState(() => new PointerLockControls$1(explCamera));\n  React.useEffect(() => {\n    if (enabled) {\n      const callback = e => {\n        invalidate();\n        if (onChange) onChange(e);\n      };\n\n      controls.connect(explDomElement);\n      controls.addEventListener('change', callback);\n      if (onLock) controls.addEventListener('lock', onLock);\n      if (onUnlock) controls.addEventListener('unlock', onUnlock); // Force events to be centered while PLC is active\n\n      const oldComputeOffsets = raycaster.computeOffsets;\n\n      raycaster.computeOffsets = e => ({\n        offsetX: e.target.width / 2,\n        offsetY: e.target.height / 2\n      }); // Enforce previous interaction\n\n\n      const handler = () => controls.lock();\n\n      const elements = selector ? Array.from(document.querySelectorAll(selector)) : [document];\n      elements.forEach(element => element && element.addEventListener('click', handler));\n      return () => {\n        controls.disconnect();\n        controls.removeEventListener('change', callback);\n        if (onLock) controls.addEventListener('lock', onLock);\n        if (onUnlock) controls.addEventListener('unlock', onUnlock);\n        elements.forEach(element => element ? element.removeEventListener('click', handler) : undefined);\n        raycaster.computeOffsets = oldComputeOffsets;\n      };\n    }\n  }, [enabled, onChange, onLock, onUnlock, controls, invalidate, selector]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls\n  }, rest));\n});\n\nexport { PointerLockControls };\n"]},"metadata":{},"sourceType":"module"}