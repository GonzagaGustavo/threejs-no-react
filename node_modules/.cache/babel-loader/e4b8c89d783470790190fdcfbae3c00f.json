{"ast":null,"code":"import _slicedToArray from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"scale\", \"frames\", \"opacity\", \"width\", \"height\", \"blur\", \"far\", \"resolution\", \"smooth\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nvar ContactShadows = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var scale = _ref.scale,\n      _ref$frames = _ref.frames,\n      frames = _ref$frames === void 0 ? Infinity : _ref$frames,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 1 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 1 : _ref$height,\n      _ref$blur = _ref.blur,\n      blur = _ref$blur === void 0 ? 1 : _ref$blur,\n      _ref$far = _ref.far,\n      far = _ref$far === void 0 ? 10 : _ref$far,\n      _ref$resolution = _ref.resolution,\n      resolution = _ref$resolution === void 0 ? 256 : _ref$resolution,\n      _ref$smooth = _ref.smooth,\n      smooth = _ref$smooth === void 0 ? true : _ref$smooth,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var scene = useThree(function (_ref2) {\n    var scene = _ref2.scene;\n    return scene;\n  });\n  var gl = useThree(function (_ref3) {\n    var gl = _ref3.gl;\n    return gl;\n  });\n  var shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n\n  var _React$useMemo = React.useMemo(function () {\n    var renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    var renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    var planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    var blurPlane = new THREE.Mesh(planeGeometry);\n    var depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = function (shader) {\n      return shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    var horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    var verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 7),\n      renderTarget = _React$useMemo2[0],\n      planeGeometry = _React$useMemo2[1],\n      depthMaterial = _React$useMemo2[2],\n      blurPlane = _React$useMemo2[3],\n      horizontalBlurMaterial = _React$useMemo2[4],\n      verticalBlurMaterial = _React$useMemo2[5],\n      renderTargetBlur = _React$useMemo2[6];\n\n  var blurShadows = React.useCallback(function (blur) {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  }, []);\n  var count = 0;\n  useFrame(function () {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      var initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"sources":["C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@react-three/drei/core/ContactShadows.js"],"names":["_extends","React","THREE","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","forwardRef","ref","scale","frames","Infinity","opacity","width","height","blur","far","resolution","smooth","props","scene","gl","shadowCamera","useRef","Array","isArray","useMemo","renderTarget","WebGLRenderTarget","renderTargetBlur","texture","generateMipmaps","planeGeometry","PlaneBufferGeometry","rotateX","Math","PI","blurPlane","Mesh","depthMaterial","MeshDepthMaterial","depthTest","depthWrite","onBeforeCompile","shader","fragmentShader","replace","horizontalBlurMaterial","ShaderMaterial","verticalBlurMaterial","blurShadows","useCallback","visible","material","uniforms","tDiffuse","value","h","setRenderTarget","render","current","v","count","initialBackground","background","overrideMaterial","createElement","geometry","rotation","map","transparent","args"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 256,\n  smooth = true,\n  ...props\n}, ref) => {\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale]);\n  const blurShadows = React.useCallback(blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  }, []);\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"]},"metadata":{},"sourceType":"module"}