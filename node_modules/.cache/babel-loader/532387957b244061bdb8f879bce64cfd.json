{"ast":null,"code":"import _classCallCheck from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as THREE from 'three';\nvar PINCH_MAX = 0.05;\nvar PINCH_THRESHOLD = 0.02;\nvar PINCH_MIN = 0.01;\nvar POINTER_ADVANCE_MAX = 0.02;\nvar POINTER_OPACITY_MAX = 1;\nvar POINTER_OPACITY_MIN = 0.4;\nvar POINTER_FRONT_RADIUS = 0.002;\nvar POINTER_REAR_RADIUS = 0.01;\nvar POINTER_REAR_RADIUS_MIN = 0.003;\nvar POINTER_LENGTH = 0.035;\nvar POINTER_SEGMENTS = 16;\nvar POINTER_RINGS = 12;\nvar POINTER_HEMISPHERE_ANGLE = 110;\nvar YAXIS = new THREE.Vector3(0, 1, 0);\nvar ZAXIS = new THREE.Vector3(0, 0, 1);\nvar CURSOR_RADIUS = 0.02;\nvar CURSOR_MAX_DISTANCE = 1.5;\n\nvar OculusHandPointerModel = /*#__PURE__*/function (_THREE$Object3D) {\n  _inherits(OculusHandPointerModel, _THREE$Object3D);\n\n  var _super = _createSuper(OculusHandPointerModel);\n\n  function OculusHandPointerModel(hand, controller) {\n    var _this;\n\n    _classCallCheck(this, OculusHandPointerModel);\n\n    _this = _super.call(this);\n    _this.hand = hand;\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    _this.pointerGeometry = null;\n    _this.pointerMesh = null;\n    _this.pointerObject = null;\n    _this.pinched = false;\n    _this.attached = false;\n    _this.cursorObject = null;\n    _this.raycaster = null;\n    hand.addEventListener('connected', function (event) {\n      var xrInputSource = event.data;\n\n      if (xrInputSource.hand) {\n        _this.visible = true;\n        _this.xrInputSource = xrInputSource;\n\n        _this.createPointer();\n      }\n    });\n    return _this;\n  }\n\n  _createClass(OculusHandPointerModel, [{\n    key: \"_drawVerticesRing\",\n    value: function _drawVerticesRing(vertices, baseVector, ringIndex) {\n      var segmentVector = baseVector.clone();\n\n      for (var i = 0; i < POINTER_SEGMENTS; i++) {\n        segmentVector.applyAxisAngle(ZAXIS, Math.PI * 2 / POINTER_SEGMENTS);\n        var vid = ringIndex * POINTER_SEGMENTS + i;\n        vertices[3 * vid] = segmentVector.x;\n        vertices[3 * vid + 1] = segmentVector.y;\n        vertices[3 * vid + 2] = segmentVector.z;\n      }\n    }\n  }, {\n    key: \"_updatePointerVertices\",\n    value: function _updatePointerVertices(rearRadius) {\n      var vertices = this.pointerGeometry.attributes.position.array; // first ring for front face\n\n      var frontFaceBase = new THREE.Vector3(POINTER_FRONT_RADIUS, 0, -1 * (POINTER_LENGTH - rearRadius));\n\n      this._drawVerticesRing(vertices, frontFaceBase, 0); // rings for rear hemisphere\n\n\n      var rearBase = new THREE.Vector3(Math.sin(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, Math.cos(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, 0);\n\n      for (var i = 0; i < POINTER_RINGS; i++) {\n        this._drawVerticesRing(vertices, rearBase, i + 1);\n\n        rearBase.applyAxisAngle(YAXIS, Math.PI * POINTER_HEMISPHERE_ANGLE / 180 / (POINTER_RINGS * -2));\n      } // front and rear face center vertices\n\n\n      var frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n      var rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n      var frontCenter = new THREE.Vector3(0, 0, -1 * (POINTER_LENGTH - rearRadius));\n      vertices[frontCenterIndex * 3] = frontCenter.x;\n      vertices[frontCenterIndex * 3 + 1] = frontCenter.y;\n      vertices[frontCenterIndex * 3 + 2] = frontCenter.z;\n      var rearCenter = new THREE.Vector3(0, 0, rearRadius);\n      vertices[rearCenterIndex * 3] = rearCenter.x;\n      vertices[rearCenterIndex * 3 + 1] = rearCenter.y;\n      vertices[rearCenterIndex * 3 + 2] = rearCenter.z;\n      this.pointerGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3)); // verticesNeedUpdate = true;\n    }\n  }, {\n    key: \"createPointer\",\n    value: function createPointer() {\n      var i, j;\n      var vertices = new Array(((POINTER_RINGS + 1) * POINTER_SEGMENTS + 2) * 3).fill(0); // const vertices = [];\n\n      var indices = [];\n      this.pointerGeometry = new THREE.BufferGeometry();\n      this.pointerGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n      this._updatePointerVertices(POINTER_REAR_RADIUS); // construct faces to connect rings\n\n\n      for (i = 0; i < POINTER_RINGS; i++) {\n        for (j = 0; j < POINTER_SEGMENTS - 1; j++) {\n          indices.push(i * POINTER_SEGMENTS + j, i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n          indices.push(i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n        }\n\n        indices.push((i + 1) * POINTER_SEGMENTS - 1, i * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n        indices.push(i * POINTER_SEGMENTS, (i + 1) * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n      } // construct front and rear face\n\n\n      var frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n      var rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n\n      for (i = 0; i < POINTER_SEGMENTS - 1; i++) {\n        indices.push(frontCenterIndex, i + 1, i);\n        indices.push(rearCenterIndex, i + POINTER_SEGMENTS * POINTER_RINGS, i + POINTER_SEGMENTS * POINTER_RINGS + 1);\n      }\n\n      indices.push(frontCenterIndex, 0, POINTER_SEGMENTS - 1);\n      indices.push(rearCenterIndex, POINTER_SEGMENTS * (POINTER_RINGS + 1) - 1, POINTER_SEGMENTS * POINTER_RINGS);\n      var material = new THREE.MeshBasicMaterial();\n      material.transparent = true;\n      material.opacity = POINTER_OPACITY_MIN;\n      this.pointerGeometry.setIndex(indices);\n      this.pointerMesh = new THREE.Mesh(this.pointerGeometry, material);\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n      this.pointerObject = new THREE.Object3D();\n      this.pointerObject.add(this.pointerMesh);\n      this.raycaster = new THREE.Raycaster(); // create cursor\n\n      var cursorGeometry = new THREE.SphereGeometry(CURSOR_RADIUS, 10, 10);\n      var cursorMaterial = new THREE.MeshBasicMaterial();\n      cursorMaterial.transparent = true;\n      cursorMaterial.opacity = POINTER_OPACITY_MIN;\n      this.cursorObject = new THREE.Mesh(cursorGeometry, cursorMaterial);\n      this.pointerObject.add(this.cursorObject);\n      this.add(this.pointerObject);\n    }\n  }, {\n    key: \"_updateRaycaster\",\n    value: function _updateRaycaster() {\n      if (this.raycaster) {\n        var pointerMatrix = this.pointerObject.matrixWorld;\n        var tempMatrix = new THREE.Matrix4();\n        tempMatrix.identity().extractRotation(pointerMatrix);\n        this.raycaster.ray.origin.setFromMatrixPosition(pointerMatrix);\n        this.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n      }\n    }\n  }, {\n    key: \"_updatePointer\",\n    value: function _updatePointer() {\n      this.pointerObject.visible = this.controller.visible;\n      var indexTip = this.hand.joints['index-finger-tip'];\n      var thumbTip = this.hand.joints['thumb-tip'];\n      var distance = indexTip.position.distanceTo(thumbTip.position);\n      var position = indexTip.position.clone().add(thumbTip.position).multiplyScalar(0.5);\n      this.pointerObject.position.copy(position);\n      this.pointerObject.quaternion.copy(this.controller.quaternion);\n      this.pinched = distance <= PINCH_THRESHOLD;\n      var pinchScale = (distance - PINCH_MIN) / (PINCH_MAX - PINCH_MIN);\n      var focusScale = (distance - PINCH_MIN) / (PINCH_THRESHOLD - PINCH_MIN);\n\n      if (pinchScale > 1) {\n        this._updatePointerVertices(POINTER_REAR_RADIUS);\n\n        this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n      } else if (pinchScale > 0) {\n        var rearRadius = (POINTER_REAR_RADIUS - POINTER_REAR_RADIUS_MIN) * pinchScale + POINTER_REAR_RADIUS_MIN;\n\n        this._updatePointerVertices(rearRadius);\n\n        if (focusScale < 1) {\n          this.pointerMesh.position.set(0, 0, -1 * rearRadius - (1 - focusScale) * POINTER_ADVANCE_MAX);\n          this.pointerMesh.material.opacity = POINTER_OPACITY_MIN + (1 - focusScale) * (POINTER_OPACITY_MAX - POINTER_OPACITY_MIN);\n        } else {\n          this.pointerMesh.position.set(0, 0, -1 * rearRadius);\n          this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n        }\n      } else {\n        this._updatePointerVertices(POINTER_REAR_RADIUS_MIN);\n\n        this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS_MIN - POINTER_ADVANCE_MAX);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MAX;\n      }\n\n      this.cursorObject.material.opacity = this.pointerMesh.material.opacity;\n    }\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(OculusHandPointerModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n\n      if (this.pointerGeometry) {\n        this._updatePointer();\n\n        this._updateRaycaster();\n      }\n    }\n  }, {\n    key: \"isPinched\",\n    value: function isPinched() {\n      return this.pinched;\n    }\n  }, {\n    key: \"setAttached\",\n    value: function setAttached(attached) {\n      this.attached = attached;\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached() {\n      return this.attached;\n    }\n  }, {\n    key: \"intersectObject\",\n    value: function intersectObject(object) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (this.raycaster) {\n        return this.raycaster.intersectObject(object, recursive);\n      }\n    }\n  }, {\n    key: \"intersectObjects\",\n    value: function intersectObjects(objects) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (this.raycaster) {\n        return this.raycaster.intersectObjects(objects, recursive);\n      }\n    }\n  }, {\n    key: \"checkIntersections\",\n    value: function checkIntersections(objects) {\n      var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.raycaster && !this.attached) {\n        var intersections = this.raycaster.intersectObjects(objects, recursive);\n        var direction = new THREE.Vector3(0, 0, -1);\n\n        if (intersections.length > 0) {\n          var intersection = intersections[0];\n          var distance = intersection.distance;\n          this.cursorObject.position.copy(direction.multiplyScalar(distance));\n        } else {\n          this.cursorObject.position.copy(direction.multiplyScalar(CURSOR_MAX_DISTANCE));\n        }\n      }\n    }\n  }, {\n    key: \"setCursor\",\n    value: function setCursor(distance) {\n      var direction = new THREE.Vector3(0, 0, -1);\n\n      if (this.raycaster && !this.attached) {\n        this.cursorObject.position.copy(direction.multiplyScalar(distance));\n      }\n    }\n  }]);\n\n  return OculusHandPointerModel;\n}(THREE.Object3D);\n\nexport { OculusHandPointerModel };","map":{"version":3,"sources":["C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/three-stdlib/webxr/OculusHandPointerModel.js"],"names":["THREE","PINCH_MAX","PINCH_THRESHOLD","PINCH_MIN","POINTER_ADVANCE_MAX","POINTER_OPACITY_MAX","POINTER_OPACITY_MIN","POINTER_FRONT_RADIUS","POINTER_REAR_RADIUS","POINTER_REAR_RADIUS_MIN","POINTER_LENGTH","POINTER_SEGMENTS","POINTER_RINGS","POINTER_HEMISPHERE_ANGLE","YAXIS","Vector3","ZAXIS","CURSOR_RADIUS","CURSOR_MAX_DISTANCE","OculusHandPointerModel","hand","controller","motionController","envMap","mesh","pointerGeometry","pointerMesh","pointerObject","pinched","attached","cursorObject","raycaster","addEventListener","event","xrInputSource","data","visible","createPointer","vertices","baseVector","ringIndex","segmentVector","clone","i","applyAxisAngle","Math","PI","vid","x","y","z","rearRadius","attributes","position","array","frontFaceBase","_drawVerticesRing","rearBase","sin","cos","frontCenterIndex","rearCenterIndex","frontCenter","rearCenter","setAttribute","Float32BufferAttribute","j","Array","fill","indices","BufferGeometry","_updatePointerVertices","push","material","MeshBasicMaterial","transparent","opacity","setIndex","Mesh","set","Object3D","add","Raycaster","cursorGeometry","SphereGeometry","cursorMaterial","pointerMatrix","matrixWorld","tempMatrix","Matrix4","identity","extractRotation","ray","origin","setFromMatrixPosition","direction","applyMatrix4","indexTip","joints","thumbTip","distance","distanceTo","multiplyScalar","copy","quaternion","pinchScale","focusScale","force","_updatePointer","_updateRaycaster","object","recursive","intersectObject","objects","intersectObjects","intersections","length","intersection"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\n\nconst PINCH_MAX = 0.05;\nconst PINCH_THRESHOLD = 0.02;\nconst PINCH_MIN = 0.01;\nconst POINTER_ADVANCE_MAX = 0.02;\nconst POINTER_OPACITY_MAX = 1;\nconst POINTER_OPACITY_MIN = 0.4;\nconst POINTER_FRONT_RADIUS = 0.002;\nconst POINTER_REAR_RADIUS = 0.01;\nconst POINTER_REAR_RADIUS_MIN = 0.003;\nconst POINTER_LENGTH = 0.035;\nconst POINTER_SEGMENTS = 16;\nconst POINTER_RINGS = 12;\nconst POINTER_HEMISPHERE_ANGLE = 110;\nconst YAXIS = new THREE.Vector3(0, 1, 0);\nconst ZAXIS = new THREE.Vector3(0, 0, 1);\nconst CURSOR_RADIUS = 0.02;\nconst CURSOR_MAX_DISTANCE = 1.5;\n\nclass OculusHandPointerModel extends THREE.Object3D {\n  constructor(hand, controller) {\n    super();\n    this.hand = hand;\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    this.pointerGeometry = null;\n    this.pointerMesh = null;\n    this.pointerObject = null;\n    this.pinched = false;\n    this.attached = false;\n    this.cursorObject = null;\n    this.raycaster = null;\n    hand.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand) {\n        this.visible = true;\n        this.xrInputSource = xrInputSource;\n        this.createPointer();\n      }\n    });\n  }\n\n  _drawVerticesRing(vertices, baseVector, ringIndex) {\n    const segmentVector = baseVector.clone();\n\n    for (var i = 0; i < POINTER_SEGMENTS; i++) {\n      segmentVector.applyAxisAngle(ZAXIS, Math.PI * 2 / POINTER_SEGMENTS);\n      const vid = ringIndex * POINTER_SEGMENTS + i;\n      vertices[3 * vid] = segmentVector.x;\n      vertices[3 * vid + 1] = segmentVector.y;\n      vertices[3 * vid + 2] = segmentVector.z;\n    }\n  }\n\n  _updatePointerVertices(rearRadius) {\n    const vertices = this.pointerGeometry.attributes.position.array; // first ring for front face\n\n    const frontFaceBase = new THREE.Vector3(POINTER_FRONT_RADIUS, 0, -1 * (POINTER_LENGTH - rearRadius));\n\n    this._drawVerticesRing(vertices, frontFaceBase, 0); // rings for rear hemisphere\n\n\n    const rearBase = new THREE.Vector3(Math.sin(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, Math.cos(Math.PI * POINTER_HEMISPHERE_ANGLE / 180) * rearRadius, 0);\n\n    for (var i = 0; i < POINTER_RINGS; i++) {\n      this._drawVerticesRing(vertices, rearBase, i + 1);\n\n      rearBase.applyAxisAngle(YAXIS, Math.PI * POINTER_HEMISPHERE_ANGLE / 180 / (POINTER_RINGS * -2));\n    } // front and rear face center vertices\n\n\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n    const frontCenter = new THREE.Vector3(0, 0, -1 * (POINTER_LENGTH - rearRadius));\n    vertices[frontCenterIndex * 3] = frontCenter.x;\n    vertices[frontCenterIndex * 3 + 1] = frontCenter.y;\n    vertices[frontCenterIndex * 3 + 2] = frontCenter.z;\n    const rearCenter = new THREE.Vector3(0, 0, rearRadius);\n    vertices[rearCenterIndex * 3] = rearCenter.x;\n    vertices[rearCenterIndex * 3 + 1] = rearCenter.y;\n    vertices[rearCenterIndex * 3 + 2] = rearCenter.z;\n    this.pointerGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3)); // verticesNeedUpdate = true;\n  }\n\n  createPointer() {\n    var i, j;\n    const vertices = new Array(((POINTER_RINGS + 1) * POINTER_SEGMENTS + 2) * 3).fill(0); // const vertices = [];\n\n    const indices = [];\n    this.pointerGeometry = new THREE.BufferGeometry();\n    this.pointerGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n    this._updatePointerVertices(POINTER_REAR_RADIUS); // construct faces to connect rings\n\n\n    for (i = 0; i < POINTER_RINGS; i++) {\n      for (j = 0; j < POINTER_SEGMENTS - 1; j++) {\n        indices.push(i * POINTER_SEGMENTS + j, i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n        indices.push(i * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j + 1, (i + 1) * POINTER_SEGMENTS + j);\n      }\n\n      indices.push((i + 1) * POINTER_SEGMENTS - 1, i * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n      indices.push(i * POINTER_SEGMENTS, (i + 1) * POINTER_SEGMENTS, (i + 2) * POINTER_SEGMENTS - 1);\n    } // construct front and rear face\n\n\n    const frontCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS);\n    const rearCenterIndex = POINTER_SEGMENTS * (1 + POINTER_RINGS) + 1;\n\n    for (i = 0; i < POINTER_SEGMENTS - 1; i++) {\n      indices.push(frontCenterIndex, i + 1, i);\n      indices.push(rearCenterIndex, i + POINTER_SEGMENTS * POINTER_RINGS, i + POINTER_SEGMENTS * POINTER_RINGS + 1);\n    }\n\n    indices.push(frontCenterIndex, 0, POINTER_SEGMENTS - 1);\n    indices.push(rearCenterIndex, POINTER_SEGMENTS * (POINTER_RINGS + 1) - 1, POINTER_SEGMENTS * POINTER_RINGS);\n    const material = new THREE.MeshBasicMaterial();\n    material.transparent = true;\n    material.opacity = POINTER_OPACITY_MIN;\n    this.pointerGeometry.setIndex(indices);\n    this.pointerMesh = new THREE.Mesh(this.pointerGeometry, material);\n    this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n    this.pointerObject = new THREE.Object3D();\n    this.pointerObject.add(this.pointerMesh);\n    this.raycaster = new THREE.Raycaster(); // create cursor\n\n    const cursorGeometry = new THREE.SphereGeometry(CURSOR_RADIUS, 10, 10);\n    const cursorMaterial = new THREE.MeshBasicMaterial();\n    cursorMaterial.transparent = true;\n    cursorMaterial.opacity = POINTER_OPACITY_MIN;\n    this.cursorObject = new THREE.Mesh(cursorGeometry, cursorMaterial);\n    this.pointerObject.add(this.cursorObject);\n    this.add(this.pointerObject);\n  }\n\n  _updateRaycaster() {\n    if (this.raycaster) {\n      const pointerMatrix = this.pointerObject.matrixWorld;\n      const tempMatrix = new THREE.Matrix4();\n      tempMatrix.identity().extractRotation(pointerMatrix);\n      this.raycaster.ray.origin.setFromMatrixPosition(pointerMatrix);\n      this.raycaster.ray.direction.set(0, 0, -1).applyMatrix4(tempMatrix);\n    }\n  }\n\n  _updatePointer() {\n    this.pointerObject.visible = this.controller.visible;\n    const indexTip = this.hand.joints['index-finger-tip'];\n    const thumbTip = this.hand.joints['thumb-tip'];\n    const distance = indexTip.position.distanceTo(thumbTip.position);\n    const position = indexTip.position.clone().add(thumbTip.position).multiplyScalar(0.5);\n    this.pointerObject.position.copy(position);\n    this.pointerObject.quaternion.copy(this.controller.quaternion);\n    this.pinched = distance <= PINCH_THRESHOLD;\n    const pinchScale = (distance - PINCH_MIN) / (PINCH_MAX - PINCH_MIN);\n    const focusScale = (distance - PINCH_MIN) / (PINCH_THRESHOLD - PINCH_MIN);\n\n    if (pinchScale > 1) {\n      this._updatePointerVertices(POINTER_REAR_RADIUS);\n\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n    } else if (pinchScale > 0) {\n      const rearRadius = (POINTER_REAR_RADIUS - POINTER_REAR_RADIUS_MIN) * pinchScale + POINTER_REAR_RADIUS_MIN;\n\n      this._updatePointerVertices(rearRadius);\n\n      if (focusScale < 1) {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius - (1 - focusScale) * POINTER_ADVANCE_MAX);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN + (1 - focusScale) * (POINTER_OPACITY_MAX - POINTER_OPACITY_MIN);\n      } else {\n        this.pointerMesh.position.set(0, 0, -1 * rearRadius);\n        this.pointerMesh.material.opacity = POINTER_OPACITY_MIN;\n      }\n    } else {\n      this._updatePointerVertices(POINTER_REAR_RADIUS_MIN);\n\n      this.pointerMesh.position.set(0, 0, -1 * POINTER_REAR_RADIUS_MIN - POINTER_ADVANCE_MAX);\n      this.pointerMesh.material.opacity = POINTER_OPACITY_MAX;\n    }\n\n    this.cursorObject.material.opacity = this.pointerMesh.material.opacity;\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.pointerGeometry) {\n      this._updatePointer();\n\n      this._updateRaycaster();\n    }\n  }\n\n  isPinched() {\n    return this.pinched;\n  }\n\n  setAttached(attached) {\n    this.attached = attached;\n  }\n\n  isAttached() {\n    return this.attached;\n  }\n\n  intersectObject(object, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObject(object, recursive);\n    }\n  }\n\n  intersectObjects(objects, recursive = true) {\n    if (this.raycaster) {\n      return this.raycaster.intersectObjects(objects, recursive);\n    }\n  }\n\n  checkIntersections(objects, recursive = false) {\n    if (this.raycaster && !this.attached) {\n      const intersections = this.raycaster.intersectObjects(objects, recursive);\n      const direction = new THREE.Vector3(0, 0, -1);\n\n      if (intersections.length > 0) {\n        const intersection = intersections[0];\n        const distance = intersection.distance;\n        this.cursorObject.position.copy(direction.multiplyScalar(distance));\n      } else {\n        this.cursorObject.position.copy(direction.multiplyScalar(CURSOR_MAX_DISTANCE));\n      }\n    }\n  }\n\n  setCursor(distance) {\n    const direction = new THREE.Vector3(0, 0, -1);\n\n    if (this.raycaster && !this.attached) {\n      this.cursorObject.position.copy(direction.multiplyScalar(distance));\n    }\n  }\n\n}\n\nexport { OculusHandPointerModel };\n"]},"metadata":{},"sourceType":"module"}