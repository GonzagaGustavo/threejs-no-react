{"ast":null,"code":"import _slicedToArray from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nvar isOrthographic = function isOrthographic(def) {\n  return def && def.isOrthographicCamera;\n};\n\nvar isObject3D = function isObject3D(def) {\n  return def && def.isObject3D;\n};\n\nvar isBox3 = function isBox3(def) {\n  return def && def.isBox3;\n};\n\nvar context = /*#__PURE__*/React.createContext(null);\n\nfunction Bounds(_ref) {\n  var children = _ref.children,\n      _ref$damping = _ref.damping,\n      damping = _ref$damping === void 0 ? 6 : _ref$damping,\n      fit = _ref.fit,\n      clip = _ref.clip,\n      _ref$margin = _ref.margin,\n      margin = _ref$margin === void 0 ? 1.2 : _ref$margin,\n      _ref$eps = _ref.eps,\n      eps = _ref$eps === void 0 ? 0.01 : _ref$eps,\n      onFit = _ref.onFit;\n  var ref = React.useRef(null);\n  var camera = useThree(function (state) {\n    return state.camera;\n  }); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  var controls = useThree(function (state) {\n    return state.controls;\n  });\n  var invalidate = useThree(function (state) {\n    return state.invalidate;\n  });\n  var onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n\n  var _React$useState = React.useState(function () {\n    return {\n      animating: false,\n      focus: new THREE.Vector3(),\n      camera: new THREE.Vector3(),\n      zoom: 1\n    };\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      current = _React$useState2[0];\n\n  var _React$useState3 = React.useState(function () {\n    return {\n      focus: new THREE.Vector3(),\n      camera: new THREE.Vector3(),\n      zoom: 1\n    };\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      goal = _React$useState4[0];\n\n  var _React$useState5 = React.useState(function () {\n    return new THREE.Box3();\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 1),\n      box = _React$useState6[0];\n\n  var api = React.useMemo(function () {\n    function getSize() {\n      var size = box.getSize(new THREE.Vector3());\n      var center = box.getCenter(new THREE.Vector3());\n      var maxSize = Math.max(size.x, size.y, size.z);\n      var fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      var fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      var distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box: box,\n        size: size,\n        center: center,\n        distance: distance\n      };\n    }\n\n    return {\n      getSize: getSize,\n      refresh: function refresh(object) {\n        if (isObject3D(object)) box.setFromObject(object);else if (isBox3(object)) box.copy(object);else if (ref.current) box.setFromObject(ref.current);\n\n        if (box.isEmpty()) {\n          var max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n\n        if ((controls == null ? void 0 : controls.constructor.name) === 'OrthographicTrackballControls') {\n          // Put camera on a sphere along which it should moves\n          var _getSize = getSize(),\n              distance = _getSize.distance;\n\n          var direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);\n          var newPos = controls.target.clone().add(direction);\n          camera.position.copy(newPos);\n        }\n\n        return this;\n      },\n      clip: function clip() {\n        var _getSize2 = getSize(),\n            distance = _getSize2.distance;\n\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        return this;\n      },\n      fit: function fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n\n        var _getSize3 = getSize(),\n            center = _getSize3.center,\n            distance = _getSize3.distance;\n\n        var direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          var maxHeight = 0,\n              maxWidth = 0;\n          var vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n\n          for (var _i = 0, _vertices = vertices; _i < _vertices.length; _i++) {\n            var v = _vertices[_i];\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n\n          maxHeight *= 2;\n          maxWidth *= 2;\n          var zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          var zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n\n          invalidate();\n        }\n\n        if (onFitRef.current) onFitRef.current(this.getSize());\n        return this;\n      }\n    };\n  }, [box, camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(function () {\n    api.refresh();\n    if (fit) api.fit();\n    if (clip) api.clip();\n\n    if (controls) {\n      // Try to prevent drag hijacking\n      var callback = function callback() {\n        return current.animating = false;\n      };\n\n      controls.addEventListener('start', callback);\n      return function () {\n        return controls.removeEventListener('start', callback);\n      };\n    }\n  }, [clip, fit, controls]);\n  useFrame(function (state, delta) {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\n\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };","map":{"version":3,"sources":["C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@react-three/drei/core/Bounds.js"],"names":["React","THREE","useThree","useFrame","isOrthographic","def","isOrthographicCamera","isObject3D","isBox3","context","createContext","Bounds","children","damping","fit","clip","margin","eps","onFit","ref","useRef","camera","state","controls","invalidate","onFitRef","current","equals","a","b","Math","abs","x","y","z","damp","v","t","lambda","delta","MathUtils","useState","animating","focus","Vector3","zoom","goal","Box3","box","api","useMemo","getSize","size","center","getCenter","maxSize","max","fitHeightDistance","atan","PI","fov","fitWidthDistance","aspect","distance","refresh","object","setFromObject","copy","isEmpty","position","length","setFromCenterAndSize","constructor","name","direction","clone","sub","target","normalize","multiplyScalar","newPos","add","maxDistance","near","far","updateProjectionMatrix","update","maxHeight","maxWidth","vertices","min","applyMatrix4","matrixWorldInverse","zoomForHeight","top","bottom","zoomForWidth","right","left","lookAt","useLayoutEffect","callback","addEventListener","removeEventListener","createElement","Provider","value","useBounds","useContext"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst isOrthographic = def => def && def.isOrthographicCamera;\n\nconst isObject3D = def => def && def.isObject3D;\n\nconst isBox3 = def => def && def.isBox3;\n\nconst context = /*#__PURE__*/React.createContext(null);\nfunction Bounds({\n  children,\n  damping = 6,\n  fit,\n  clip,\n  margin = 1.2,\n  eps = 0.01,\n  onFit\n}) {\n  const ref = React.useRef(null);\n  const camera = useThree(state => state.camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const controls = useThree(state => state.controls);\n  const invalidate = useThree(state => state.invalidate);\n  const onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n\n  const [current] = React.useState(() => ({\n    animating: false,\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [goal] = React.useState(() => ({\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [box] = React.useState(() => new THREE.Box3());\n  const api = React.useMemo(() => {\n    function getSize() {\n      const size = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(size.x, size.y, size.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box,\n        size,\n        center,\n        distance\n      };\n    }\n\n    return {\n      getSize,\n\n      refresh(object) {\n        if (isObject3D(object)) box.setFromObject(object);else if (isBox3(object)) box.copy(object);else if (ref.current) box.setFromObject(ref.current);\n\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n\n        if ((controls == null ? void 0 : controls.constructor.name) === 'OrthographicTrackballControls') {\n          // Put camera on a sphere along which it should moves\n          const {\n            distance\n          } = getSize();\n          const direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);\n          const newPos = controls.target.clone().add(direction);\n          camera.position.copy(newPos);\n        }\n\n        return this;\n      },\n\n      clip() {\n        const {\n          distance\n        } = getSize();\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        return this;\n      },\n\n      fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          let maxHeight = 0,\n              maxWidth = 0;\n          const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n\n          for (const v of vertices) {\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n\n          maxHeight *= 2;\n          maxWidth *= 2;\n          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          const zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n\n          invalidate();\n        }\n\n        if (onFitRef.current) onFitRef.current(this.getSize());\n        return this;\n      }\n\n    };\n  }, [box, camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(() => {\n    api.refresh();\n    if (fit) api.fit();\n    if (clip) api.clip();\n\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = () => current.animating = false;\n\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [clip, fit, controls]);\n  useFrame((state, delta) => {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };\n"]},"metadata":{},"sourceType":"module"}