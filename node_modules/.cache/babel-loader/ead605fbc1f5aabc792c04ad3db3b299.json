{"ast":null,"code":"import _classCallCheck from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Object3D, SphereGeometry, MeshBasicMaterial, Mesh } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers.js';\nvar DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nvar DEFAULT_PROFILE = 'generic-trigger';\n\nvar XRControllerModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRControllerModel, _Object3D);\n\n  var _super = _createSuper(XRControllerModel);\n\n  function XRControllerModel() {\n    var _this;\n\n    _classCallCheck(this, XRControllerModel);\n\n    _this = _super.call(this);\n    _this.motionController = null;\n    _this.envMap = null;\n    return _this;\n  }\n\n  _createClass(XRControllerModel, [{\n    key: \"setEnvironmentMap\",\n    value: function setEnvironmentMap(envMap) {\n      var _this2 = this;\n\n      if (this.envMap == envMap) {\n        return this;\n      }\n\n      this.envMap = envMap;\n      this.traverse(function (child) {\n        if (child.isMesh) {\n          child.material.envMap = _this2.envMap;\n          child.material.needsUpdate = true;\n        }\n      });\n      return this;\n    }\n    /**\n     * Polls data from the XRInputSource and updates the model's components to match\n     * the real world data\n     */\n\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRControllerModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n\n      if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n      this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n      Object.values(this.motionController.components).forEach(function (component) {\n        // Update node data based on the visual responses' current states\n        Object.values(component.visualResponses).forEach(function (visualResponse) {\n          var valueNode = visualResponse.valueNode,\n              minNode = visualResponse.minNode,\n              maxNode = visualResponse.maxNode,\n              value = visualResponse.value,\n              valueNodeProperty = visualResponse.valueNodeProperty; // Skip if the visual response node is not found. No error is needed,\n          // because it will have been reported at load time.\n\n          if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n          if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n            valueNode.visible = value;\n          } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n            valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n            valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n          }\n        });\n      });\n    }\n  }]);\n\n  return XRControllerModel;\n}(Object3D);\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(function (component) {\n    var type = component.type,\n        touchPointNodeName = component.touchPointNodeName,\n        visualResponses = component.visualResponses;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        var sphereGeometry = new SphereGeometry(0.001);\n        var material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        var sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(\"Could not find touch dot, \".concat(component.touchPointNodeName, \", in touchpad component \").concat(component.id));\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(function (visualResponse) {\n      var valueNodeName = visualResponse.valueNodeName,\n          minNodeName = visualResponse.minNodeName,\n          maxNodeName = visualResponse.maxNodeName,\n          valueNodeProperty = visualResponse.valueNodeProperty; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(\"Could not find \".concat(minNodeName, \" in the model\"));\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(\"Could not find \".concat(maxNodeName, \" in the model\"));\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(\"Could not find \".concat(valueNodeName, \" in the model\"));\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(function (child) {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nvar XRControllerModelFactory = /*#__PURE__*/function () {\n  function XRControllerModelFactory() {\n    var gltfLoader = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, XRControllerModelFactory);\n\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  _createClass(XRControllerModelFactory, [{\n    key: \"createControllerModel\",\n    value: function createControllerModel(controller) {\n      var _this3 = this;\n\n      var controllerModel = new XRControllerModel();\n      var scene = null;\n      controller.addEventListener('connected', function (event) {\n        var xrInputSource = event.data;\n        if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n        fetchProfile(xrInputSource, _this3.path, DEFAULT_PROFILE).then(function (_ref) {\n          var profile = _ref.profile,\n              assetPath = _ref.assetPath;\n          controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n          var cachedAsset = _this3._assetCache[controllerModel.motionController.assetUrl];\n\n          if (cachedAsset) {\n            scene = cachedAsset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          } else {\n            if (!_this3.gltfLoader) {\n              throw new Error('GLTFLoader not set.');\n            }\n\n            _this3.gltfLoader.setPath('');\n\n            _this3.gltfLoader.load(controllerModel.motionController.assetUrl, function (asset) {\n              _this3._assetCache[controllerModel.motionController.assetUrl] = asset;\n              scene = asset.scene.clone();\n              addAssetSceneToControllerModel(controllerModel, scene);\n            }, null, function () {\n              throw new Error(\"Asset \".concat(controllerModel.motionController.assetUrl, \" missing or malformed.\"));\n            });\n          }\n        }).catch(function (err) {\n          console.warn(err);\n        });\n      });\n      controller.addEventListener('disconnected', function () {\n        controllerModel.motionController = null;\n        controllerModel.remove(scene);\n        scene = null;\n      });\n      return controllerModel;\n    }\n  }]);\n\n  return XRControllerModelFactory;\n}();\n\nexport { XRControllerModelFactory };","map":{"version":3,"sources":["C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/three-stdlib/webxr/XRControllerModelFactory.js"],"names":["Object3D","SphereGeometry","MeshBasicMaterial","Mesh","GLTFLoader","fetchProfile","MotionController","MotionControllerConstants","DEFAULT_PROFILES_PATH","DEFAULT_PROFILE","XRControllerModel","motionController","envMap","traverse","child","isMesh","material","needsUpdate","force","updateFromGamepad","Object","values","components","forEach","component","visualResponses","visualResponse","valueNode","minNode","maxNode","value","valueNodeProperty","VisualResponseProperty","VISIBILITY","visible","TRANSFORM","quaternion","slerpQuaternions","position","lerpVectors","findNodes","scene","type","touchPointNodeName","ComponentType","TOUCHPAD","touchPointNode","getObjectByName","sphereGeometry","color","sphere","add","console","warn","id","valueNodeName","minNodeName","maxNodeName","addAssetSceneToControllerModel","controllerModel","XRControllerModelFactory","gltfLoader","path","_assetCache","controller","addEventListener","event","xrInputSource","data","targetRayMode","gamepad","then","profile","assetPath","cachedAsset","assetUrl","clone","Error","setPath","load","asset","catch","err","remove"],"mappings":"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","sourcesContent":["import { Object3D, SphereGeometry, MeshBasicMaterial, Mesh } from 'three';\nimport { GLTFLoader } from '../loaders/GLTFLoader.js';\nimport { fetchProfile, MotionController, MotionControllerConstants } from '../libs/MotionControllers.js';\n\nconst DEFAULT_PROFILES_PATH = 'https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles';\nconst DEFAULT_PROFILE = 'generic-trigger';\n\nclass XRControllerModel extends Object3D {\n  constructor() {\n    super();\n    this.motionController = null;\n    this.envMap = null;\n  }\n\n  setEnvironmentMap(envMap) {\n    if (this.envMap == envMap) {\n      return this;\n    }\n\n    this.envMap = envMap;\n    this.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = this.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n    return this;\n  }\n  /**\n   * Polls data from the XRInputSource and updates the model's components to match\n   * the real world data\n   */\n\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n    if (!this.motionController) return; // Cause the MotionController to poll the Gamepad for data\n\n    this.motionController.updateFromGamepad(); // Update the 3D model to reflect the button, thumbstick, and touchpad state\n\n    Object.values(this.motionController.components).forEach(component => {\n      // Update node data based on the visual responses' current states\n      Object.values(component.visualResponses).forEach(visualResponse => {\n        const {\n          valueNode,\n          minNode,\n          maxNode,\n          value,\n          valueNodeProperty\n        } = visualResponse; // Skip if the visual response node is not found. No error is needed,\n        // because it will have been reported at load time.\n\n        if (!valueNode) return; // Calculate the new properties based on the weight supplied\n\n        if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          valueNode.visible = value;\n        } else if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n          valueNode.quaternion.slerpQuaternions(minNode.quaternion, maxNode.quaternion, value);\n          valueNode.position.lerpVectors(minNode.position, maxNode.position, value);\n        }\n      });\n    });\n  }\n\n}\n/**\n * Walks the model's tree to find the nodes needed to animate the components and\n * saves them to the motionContoller components for use in the frame loop. When\n * touchpads are found, attaches a touch dot to them.\n */\n\n\nfunction findNodes(motionController, scene) {\n  // Loop through the components and find the nodes needed for each components' visual responses\n  Object.values(motionController.components).forEach(component => {\n    const {\n      type,\n      touchPointNodeName,\n      visualResponses\n    } = component;\n\n    if (type === MotionControllerConstants.ComponentType.TOUCHPAD) {\n      component.touchPointNode = scene.getObjectByName(touchPointNodeName);\n\n      if (component.touchPointNode) {\n        // Attach a touch dot to the touchpad.\n        const sphereGeometry = new SphereGeometry(0.001);\n        const material = new MeshBasicMaterial({\n          color: 0x0000ff\n        });\n        const sphere = new Mesh(sphereGeometry, material);\n        component.touchPointNode.add(sphere);\n      } else {\n        console.warn(`Could not find touch dot, ${component.touchPointNodeName}, in touchpad component ${component.id}`);\n      }\n    } // Loop through all the visual responses to be applied to this component\n\n\n    Object.values(visualResponses).forEach(visualResponse => {\n      const {\n        valueNodeName,\n        minNodeName,\n        maxNodeName,\n        valueNodeProperty\n      } = visualResponse; // If animating a transform, find the two nodes to be interpolated between.\n\n      if (valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n        visualResponse.minNode = scene.getObjectByName(minNodeName);\n        visualResponse.maxNode = scene.getObjectByName(maxNodeName); // If the extents cannot be found, skip this animation\n\n        if (!visualResponse.minNode) {\n          console.warn(`Could not find ${minNodeName} in the model`);\n          return;\n        }\n\n        if (!visualResponse.maxNode) {\n          console.warn(`Could not find ${maxNodeName} in the model`);\n          return;\n        }\n      } // If the target node cannot be found, skip this animation\n\n\n      visualResponse.valueNode = scene.getObjectByName(valueNodeName);\n\n      if (!visualResponse.valueNode) {\n        console.warn(`Could not find ${valueNodeName} in the model`);\n      }\n    });\n  });\n}\n\nfunction addAssetSceneToControllerModel(controllerModel, scene) {\n  // Find the nodes needed for animation and cache them on the motionController.\n  findNodes(controllerModel.motionController, scene); // Apply any environment map that the mesh already has set.\n\n  if (controllerModel.envMap) {\n    scene.traverse(child => {\n      if (child.isMesh) {\n        child.material.envMap = controllerModel.envMap;\n        child.material.needsUpdate = true;\n      }\n    });\n  } // Add the glTF scene to the controllerModel.\n\n\n  controllerModel.add(scene);\n}\n\nclass XRControllerModelFactory {\n  constructor(gltfLoader = null) {\n    this.gltfLoader = gltfLoader;\n    this.path = DEFAULT_PROFILES_PATH;\n    this._assetCache = {}; // If a GLTFLoader wasn't supplied to the constructor create a new one.\n\n    if (!this.gltfLoader) {\n      this.gltfLoader = new GLTFLoader();\n    }\n  }\n\n  createControllerModel(controller) {\n    const controllerModel = new XRControllerModel();\n    let scene = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n      if (xrInputSource.targetRayMode !== 'tracked-pointer' || !xrInputSource.gamepad) return;\n      fetchProfile(xrInputSource, this.path, DEFAULT_PROFILE).then(({\n        profile,\n        assetPath\n      }) => {\n        controllerModel.motionController = new MotionController(xrInputSource, profile, assetPath);\n        const cachedAsset = this._assetCache[controllerModel.motionController.assetUrl];\n\n        if (cachedAsset) {\n          scene = cachedAsset.scene.clone();\n          addAssetSceneToControllerModel(controllerModel, scene);\n        } else {\n          if (!this.gltfLoader) {\n            throw new Error('GLTFLoader not set.');\n          }\n\n          this.gltfLoader.setPath('');\n          this.gltfLoader.load(controllerModel.motionController.assetUrl, asset => {\n            this._assetCache[controllerModel.motionController.assetUrl] = asset;\n            scene = asset.scene.clone();\n            addAssetSceneToControllerModel(controllerModel, scene);\n          }, null, () => {\n            throw new Error(`Asset ${controllerModel.motionController.assetUrl} missing or malformed.`);\n          });\n        }\n      }).catch(err => {\n        console.warn(err);\n      });\n    });\n    controller.addEventListener('disconnected', () => {\n      controllerModel.motionController = null;\n      controllerModel.remove(scene);\n      scene = null;\n    });\n    return controllerModel;\n  }\n\n}\n\nexport { XRControllerModelFactory };\n"]},"metadata":{},"sourceType":"module"}