{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial as MeshReflectorMaterial$1 } from '../materials/MeshReflectorMaterial.js';\nextend({\n  MeshReflectorMaterialImpl: MeshReflectorMaterial$1\n});\nconst MeshReflectorMaterial = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    mixBlur = 0,\n    mixStrength = 1,\n    resolution = 256,\n    blur = [0, 0],\n    minDepthThreshold = 0.9,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25,\n    mirror = 0,\n    distortion = 1,\n    mixContrast = 1,\n    distortionMap,\n    reflectorOffset = 0,\n    ...props\n  } = _ref;\n  const gl = useThree(_ref2 => {\n    let {\n      gl\n    } = _ref2;\n    return gl;\n  });\n  const camera = useThree(_ref3 => {\n    let {\n      camera\n    } = _ref3;\n    return camera;\n  });\n  const scene = useThree(_ref4 => {\n    let {\n      scene\n    } = _ref4;\n    return scene;\n  });\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const materialRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    var _materialRef$current; // TODO: As of R3f 7-8 this should be __r3f.parent\n\n\n    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);\n    if (!parent) return;\n    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(parent.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    reflectorWorldPosition.addScaledVector(normal, reflectorOffset);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(parent.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera, reflectorOffset]);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1],\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      transparent: true,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    var _materialRef$current2; // TODO: As of R3f 7-8 this should be __r3f.parent\n\n\n    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);\n    if (!parent) return;\n    parent.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    parent.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"meshReflectorMaterialImpl\", _extends({\n    attach: \"material\" // Defines can't be updated dynamically, so we need to recreate the material\n    ,\n    key: 'key' + reflectorProps['defines-USE_BLUR'] + reflectorProps['defines-USE_DEPTH'] + reflectorProps['defines-USE_DISTORTION'],\n    ref: mergeRefs([materialRef, ref])\n  }, reflectorProps, props));\n});\nexport { MeshReflectorMaterial };","map":{"version":3,"sources":["C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@react-three/drei/core/MeshReflectorMaterial.js"],"names":["_extends","React","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","LinearFilter","WebGLRenderTarget","DepthTexture","DepthFormat","UnsignedShortType","extend","useThree","useFrame","mergeRefs","BlurPass","MeshReflectorMaterial","MeshReflectorMaterial$1","MeshReflectorMaterialImpl","forwardRef","ref","mixBlur","mixStrength","resolution","blur","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","mirror","distortion","mixContrast","distortionMap","reflectorOffset","props","gl","camera","scene","Array","isArray","hasBlur","materialRef","useRef","reflectorPlane","useState","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","beforeRender","useCallback","_materialRef$current","parent","current","__r3f","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","addScaledVector","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","fbo1","fbo2","blurpass","reflectorProps","useMemo","parameters","minFilter","magFilter","encoding","outputEncoding","depthBuffer","depthTexture","format","type","width","height","tDiffuse","texture","tDepth","tDiffuseBlur","transparent","undefined","_materialRef$current2","visible","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","createElement","attach","key"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial as MeshReflectorMaterial$1 } from '../materials/MeshReflectorMaterial.js';\n\nextend({\n  MeshReflectorMaterialImpl: MeshReflectorMaterial$1\n});\nconst MeshReflectorMaterial = /*#__PURE__*/React.forwardRef(({\n  mixBlur = 0,\n  mixStrength = 1,\n  resolution = 256,\n  blur = [0, 0],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror = 0,\n  distortion = 1,\n  mixContrast = 1,\n  distortionMap,\n  reflectorOffset = 0,\n  ...props\n}, ref) => {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const materialRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    var _materialRef$current;\n\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);\n    if (!parent) return;\n    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(parent.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    reflectorWorldPosition.addScaledVector(normal, reflectorOffset);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(parent.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, [camera, reflectorOffset]);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1],\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      transparent: true,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    var _materialRef$current2;\n\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);\n    if (!parent) return;\n    parent.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    parent.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"meshReflectorMaterialImpl\", _extends({\n    attach: \"material\" // Defines can't be updated dynamically, so we need to recreate the material\n    ,\n    key: 'key' + reflectorProps['defines-USE_BLUR'] + reflectorProps['defines-USE_DEPTH'] + reflectorProps['defines-USE_DISTORTION'],\n    ref: mergeRefs([materialRef, ref])\n  }, reflectorProps, props));\n});\n\nexport { MeshReflectorMaterial };\n"]},"metadata":{},"sourceType":"module"}