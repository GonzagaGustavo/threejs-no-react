{"ast":null,"code":"import _classCallCheck from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MeshStandardMaterial } from 'three';\n\nvar MeshReflectorMaterial = /*#__PURE__*/function (_MeshStandardMaterial) {\n  _inherits(MeshReflectorMaterial, _MeshStandardMaterial);\n\n  var _super = _createSuper(MeshReflectorMaterial);\n\n  function MeshReflectorMaterial() {\n    var _this;\n\n    var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, MeshReflectorMaterial);\n\n    _this = _super.call(this, parameters);\n    _this._tDepth = {\n      value: null\n    };\n    _this._distortionMap = {\n      value: null\n    };\n    _this._tDiffuse = {\n      value: null\n    };\n    _this._tDiffuseBlur = {\n      value: null\n    };\n    _this._textureMatrix = {\n      value: null\n    };\n    _this._hasBlur = {\n      value: false\n    };\n    _this._mirror = {\n      value: 0.0\n    };\n    _this._mixBlur = {\n      value: 0.0\n    };\n    _this._blurStrength = {\n      value: 0.5\n    };\n    _this._minDepthThreshold = {\n      value: 0.9\n    };\n    _this._maxDepthThreshold = {\n      value: 1\n    };\n    _this._depthScale = {\n      value: 0\n    };\n    _this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    _this._distortion = {\n      value: 1\n    };\n    _this._mixContrast = {\n      value: 1.0\n    };\n\n    _this.setValues(parameters);\n\n    return _this;\n  }\n\n  _createClass(MeshReflectorMaterial, [{\n    key: \"onBeforeCompile\",\n    value: function onBeforeCompile(shader) {\n      var _shader$defines;\n\n      if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n        shader.defines.USE_UV = '';\n      }\n\n      shader.uniforms.hasBlur = this._hasBlur;\n      shader.uniforms.tDiffuse = this._tDiffuse;\n      shader.uniforms.tDepth = this._tDepth;\n      shader.uniforms.distortionMap = this._distortionMap;\n      shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n      shader.uniforms.textureMatrix = this._textureMatrix;\n      shader.uniforms.mirror = this._mirror;\n      shader.uniforms.mixBlur = this._mixBlur;\n      shader.uniforms.mixStrength = this._blurStrength;\n      shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n      shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n      shader.uniforms.depthScale = this._depthScale;\n      shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n      shader.uniforms.distortion = this._distortion;\n      shader.uniforms.mixContrast = this._mixContrast;\n      shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \".concat(shader.vertexShader);\n      shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n      shader.fragmentShader = \"\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDiffuseBlur;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform bool hasBlur;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float mixContrast;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;        \\n        \".concat(shader.fragmentShader);\n      shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n    \\n      float distortionFactor = 0.0;\\n      #ifdef USE_DISTORTION\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      vec4 new_vUv = my_vUv;\\n      new_vUv.x += distortionFactor;\\n      new_vUv.y += distortionFactor;\\n\\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\\n      \\n      vec4 merge = base;\\n      \\n      #ifdef USE_NORMALMAP\\n        vec2 normal_uv = vec2(0.0);\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\\n        vec3 coord = new_vUv.xyz / new_vUv.w;\\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\\n        merge = base_normal;\\n        blur = blur_normal;\\n      #endif\\n\\n      float depthFactor = 0.0001;\\n      float blurFactor = 0.0;\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth = texture2DProj(tDepth, new_vUv);\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *= depthScale;\\n        depthFactor = max(0.0001, min(1.0, depthFactor));\\n\\n        #ifdef USE_BLUR\\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\\n          merge = merge * min(1.0, depthFactor + 0.5);\\n        #else\\n          merge = merge * depthFactor;\\n        #endif\\n  \\n      #endif\\n\\n      float reflectorRoughnessFactor = roughness;\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n      \\n      #ifdef USE_BLUR\\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\\n        merge = mix(merge, blur, blurFactor);\\n      #endif\\n\\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\\n\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\\n      \");\n    }\n  }, {\n    key: \"tDiffuse\",\n    get: function get() {\n      return this._tDiffuse.value;\n    },\n    set: function set(v) {\n      this._tDiffuse.value = v;\n    }\n  }, {\n    key: \"tDepth\",\n    get: function get() {\n      return this._tDepth.value;\n    },\n    set: function set(v) {\n      this._tDepth.value = v;\n    }\n  }, {\n    key: \"distortionMap\",\n    get: function get() {\n      return this._distortionMap.value;\n    },\n    set: function set(v) {\n      this._distortionMap.value = v;\n    }\n  }, {\n    key: \"tDiffuseBlur\",\n    get: function get() {\n      return this._tDiffuseBlur.value;\n    },\n    set: function set(v) {\n      this._tDiffuseBlur.value = v;\n    }\n  }, {\n    key: \"textureMatrix\",\n    get: function get() {\n      return this._textureMatrix.value;\n    },\n    set: function set(v) {\n      this._textureMatrix.value = v;\n    }\n  }, {\n    key: \"hasBlur\",\n    get: function get() {\n      return this._hasBlur.value;\n    },\n    set: function set(v) {\n      this._hasBlur.value = v;\n    }\n  }, {\n    key: \"mirror\",\n    get: function get() {\n      return this._mirror.value;\n    },\n    set: function set(v) {\n      this._mirror.value = v;\n    }\n  }, {\n    key: \"mixBlur\",\n    get: function get() {\n      return this._mixBlur.value;\n    },\n    set: function set(v) {\n      this._mixBlur.value = v;\n    }\n  }, {\n    key: \"mixStrength\",\n    get: function get() {\n      return this._blurStrength.value;\n    },\n    set: function set(v) {\n      this._blurStrength.value = v;\n    }\n  }, {\n    key: \"minDepthThreshold\",\n    get: function get() {\n      return this._minDepthThreshold.value;\n    },\n    set: function set(v) {\n      this._minDepthThreshold.value = v;\n    }\n  }, {\n    key: \"maxDepthThreshold\",\n    get: function get() {\n      return this._maxDepthThreshold.value;\n    },\n    set: function set(v) {\n      this._maxDepthThreshold.value = v;\n    }\n  }, {\n    key: \"depthScale\",\n    get: function get() {\n      return this._depthScale.value;\n    },\n    set: function set(v) {\n      this._depthScale.value = v;\n    }\n  }, {\n    key: \"depthToBlurRatioBias\",\n    get: function get() {\n      return this._depthToBlurRatioBias.value;\n    },\n    set: function set(v) {\n      this._depthToBlurRatioBias.value = v;\n    }\n  }, {\n    key: \"distortion\",\n    get: function get() {\n      return this._distortion.value;\n    },\n    set: function set(v) {\n      this._distortion.value = v;\n    }\n  }, {\n    key: \"mixContrast\",\n    get: function get() {\n      return this._mixContrast.value;\n    },\n    set: function set(v) {\n      this._mixContrast.value = v;\n    }\n  }]);\n\n  return MeshReflectorMaterial;\n}(MeshStandardMaterial);\n\nexport { MeshReflectorMaterial };","map":{"version":3,"sources":["C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"names":["MeshStandardMaterial","MeshReflectorMaterial","parameters","_tDepth","value","_distortionMap","_tDiffuse","_tDiffuseBlur","_textureMatrix","_hasBlur","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","_mixContrast","setValues","shader","_shader$defines","defines","USE_UV","uniforms","hasBlur","tDiffuse","tDepth","distortionMap","tDiffuseBlur","textureMatrix","mirror","mixBlur","mixStrength","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","distortion","mixContrast","vertexShader","replace","fragmentShader","v"],"mappings":"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","sourcesContent":["import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;     \n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;        \n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n    \n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n      \n      vec4 merge = base;\n      \n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n  \n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n      \n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      `);\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"]},"metadata":{},"sourceType":"module"}