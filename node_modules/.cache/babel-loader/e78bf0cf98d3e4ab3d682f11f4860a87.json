{"ast":null,"code":"import _classCallCheck from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\nvar TOUCH_RADIUS = 0.01;\nvar POINTING_JOINT = 'index-finger-tip';\n\nvar OculusHandModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(OculusHandModel, _Object3D);\n\n  var _super = _createSuper(OculusHandModel);\n\n  function OculusHandModel(controller) {\n    var _this;\n\n    _classCallCheck(this, OculusHandModel);\n\n    _this = _super.call(this);\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    controller.addEventListener('connected', function (event) {\n      var xrInputSource = event.data;\n\n      if (xrInputSource.hand && !_this.motionController) {\n        _this.xrInputSource = xrInputSource;\n        _this.motionController = new XRHandMeshModel(_assertThisInitialized(_this), controller, _this.path, xrInputSource.handedness);\n      }\n    });\n    controller.addEventListener('disconnected', function () {\n      _this.clear();\n\n      _this.motionController = null;\n    });\n    return _this;\n  }\n\n  _createClass(OculusHandModel, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(OculusHandModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n\n      if (this.motionController) {\n        this.motionController.updateMesh();\n      }\n    }\n  }, {\n    key: \"getPointerPosition\",\n    value: function getPointerPosition() {\n      var indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n      if (indexFingerTip) {\n        return indexFingerTip.position;\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"intersectBoxObject\",\n    value: function intersectBoxObject(boxObject) {\n      var pointerPosition = this.getPointerPosition();\n\n      if (pointerPosition) {\n        var indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n        var box = new Box3().setFromObject(boxObject);\n        return indexSphere.intersectsBox(box);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"checkButton\",\n    value: function checkButton(button) {\n      if (this.intersectBoxObject(button)) {\n        button.onPress();\n      } else {\n        button.onClear();\n      }\n\n      if (button.isPressed()) {\n        button.whilePressed();\n      }\n    }\n  }]);\n\n  return OculusHandModel;\n}(Object3D);\n\nexport { OculusHandModel };","map":{"version":3,"sources":["C:/Users/Gustavo Gonzaga/Documents/GitHub/threejsnoreact/node_modules/three-stdlib/webxr/OculusHandModel.js"],"names":["Object3D","Sphere","Box3","XRHandMeshModel","TOUCH_RADIUS","POINTING_JOINT","OculusHandModel","controller","motionController","envMap","mesh","addEventListener","event","xrInputSource","data","hand","path","handedness","clear","force","updateMesh","indexFingerTip","joints","position","boxObject","pointerPosition","getPointerPosition","indexSphere","box","setFromObject","intersectsBox","button","intersectBoxObject","onPress","onClear","isPressed","whilePressed"],"mappings":";;;;;;;AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,IAA3B,QAAuC,OAAvC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AAEA,IAAMC,YAAY,GAAG,IAArB;AACA,IAAMC,cAAc,GAAG,kBAAvB;;IAEMC,e;;;;;AACJ,2BAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AACtB;AACA,UAAKA,UAAL,GAAkBA,UAAlB;AACA,UAAKC,gBAAL,GAAwB,IAAxB;AACA,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,IAAL,GAAY,IAAZ;AACAH,IAAAA,UAAU,CAACI,gBAAX,CAA4B,WAA5B,EAAyC,UAAAC,KAAK,EAAI;AAChD,UAAMC,aAAa,GAAGD,KAAK,CAACE,IAA5B;;AAEA,UAAID,aAAa,CAACE,IAAd,IAAsB,CAAC,MAAKP,gBAAhC,EAAkD;AAChD,cAAKK,aAAL,GAAqBA,aAArB;AACA,cAAKL,gBAAL,GAAwB,IAAIL,eAAJ,gCAA0BI,UAA1B,EAAsC,MAAKS,IAA3C,EAAiDH,aAAa,CAACI,UAA/D,CAAxB;AACD;AACF,KAPD;AAQAV,IAAAA,UAAU,CAACI,gBAAX,CAA4B,cAA5B,EAA4C,YAAM;AAChD,YAAKO,KAAL;;AACA,YAAKV,gBAAL,GAAwB,IAAxB;AACD,KAHD;AAdsB;AAkBvB;;;;WAED,2BAAkBW,KAAlB,EAAyB;AACvB,6FAAwBA,KAAxB;;AAEA,UAAI,KAAKX,gBAAT,EAA2B;AACzB,aAAKA,gBAAL,CAAsBY,UAAtB;AACD;AACF;;;WAED,8BAAqB;AACnB,UAAMC,cAAc,GAAG,KAAKd,UAAL,CAAgBe,MAAhB,CAAuBjB,cAAvB,CAAvB;;AAEA,UAAIgB,cAAJ,EAAoB;AAClB,eAAOA,cAAc,CAACE,QAAtB;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;WAED,4BAAmBC,SAAnB,EAA8B;AAC5B,UAAMC,eAAe,GAAG,KAAKC,kBAAL,EAAxB;;AAEA,UAAID,eAAJ,EAAqB;AACnB,YAAME,WAAW,GAAG,IAAI1B,MAAJ,CAAWwB,eAAX,EAA4BrB,YAA5B,CAApB;AACA,YAAMwB,GAAG,GAAG,IAAI1B,IAAJ,GAAW2B,aAAX,CAAyBL,SAAzB,CAAZ;AACA,eAAOG,WAAW,CAACG,aAAZ,CAA0BF,GAA1B,CAAP;AACD,OAJD,MAIO;AACL,eAAO,KAAP;AACD;AACF;;;WAED,qBAAYG,MAAZ,EAAoB;AAClB,UAAI,KAAKC,kBAAL,CAAwBD,MAAxB,CAAJ,EAAqC;AACnCA,QAAAA,MAAM,CAACE,OAAP;AACD,OAFD,MAEO;AACLF,QAAAA,MAAM,CAACG,OAAP;AACD;;AAED,UAAIH,MAAM,CAACI,SAAP,EAAJ,EAAwB;AACtBJ,QAAAA,MAAM,CAACK,YAAP;AACD;AACF;;;;EA7D2BpC,Q;;AAiE9B,SAASM,eAAT","sourcesContent":["import { Object3D, Sphere, Box3 } from 'three';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nconst TOUCH_RADIUS = 0.01;\nconst POINTING_JOINT = 'index-finger-tip';\n\nclass OculusHandModel extends Object3D {\n  constructor(controller) {\n    super();\n    this.controller = controller;\n    this.motionController = null;\n    this.envMap = null;\n    this.mesh = null;\n    controller.addEventListener('connected', event => {\n      const xrInputSource = event.data;\n\n      if (xrInputSource.hand && !this.motionController) {\n        this.xrInputSource = xrInputSource;\n        this.motionController = new XRHandMeshModel(this, controller, this.path, xrInputSource.handedness);\n      }\n    });\n    controller.addEventListener('disconnected', () => {\n      this.clear();\n      this.motionController = null;\n    });\n  }\n\n  updateMatrixWorld(force) {\n    super.updateMatrixWorld(force);\n\n    if (this.motionController) {\n      this.motionController.updateMesh();\n    }\n  }\n\n  getPointerPosition() {\n    const indexFingerTip = this.controller.joints[POINTING_JOINT];\n\n    if (indexFingerTip) {\n      return indexFingerTip.position;\n    } else {\n      return null;\n    }\n  }\n\n  intersectBoxObject(boxObject) {\n    const pointerPosition = this.getPointerPosition();\n\n    if (pointerPosition) {\n      const indexSphere = new Sphere(pointerPosition, TOUCH_RADIUS);\n      const box = new Box3().setFromObject(boxObject);\n      return indexSphere.intersectsBox(box);\n    } else {\n      return false;\n    }\n  }\n\n  checkButton(button) {\n    if (this.intersectBoxObject(button)) {\n      button.onPress();\n    } else {\n      button.onClear();\n    }\n\n    if (button.isPressed()) {\n      button.whilePressed();\n    }\n  }\n\n}\n\nexport { OculusHandModel };\n"]},"metadata":{},"sourceType":"module"}